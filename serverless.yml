service: azure-terraform-cost-estimator
frameworkVersion: '2'
provider:
  name: aws
  runtime: go1.x
  tracing:
    apiGateway: true
    lambda: true

# you can overwrite defaults here
  stage: dev
  region: us-east-2
  timeout: 600

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
      Resource:
        Fn::Join:
          - ""
          - - "arn:"
            - "aws:"
            - "dynamodb:"
            - "Ref": "AWS::Region"
            - ":"
            - "Ref": "AWS::AccountId"
            - ":table/"
            - "Ref": "DDBTable"
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
      Resource:
        Fn::Join:
          - ""
          - - "arn:"
            - "aws:"
            - "dynamodb:"
            - "Ref": "AWS::Region"
            - ":"
            - "Ref": "AWS::AccountId"
            - ":table/"
            - "Ref": "ReqTable"
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

# you can define service wide environment variables here
  environment:
    DYNAMO_TABLE: {Ref: "DDBTable"}
    REQ_TABLE: {Ref: "ReqTable"}

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  extractor:
    handler: bin/extractor
    events:
      - schedule: rate(30 days)
  api:
    handler: bin/api
    events:
      - http:
          path: estimate
          method: post

#    Define function environment variables here


# you can add CloudFormation resource templates here
resources:
  Resources:
    DDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    WriteCapacityScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 15
        MinCapacity: 5
        ResourceId: !Join
          - /
          - - table
            - !Ref DDBTable
        RoleARN: !GetAtt ScalingRole.Arn
        ScalableDimension: dynamodb:table:WriteCapacityUnits
        ServiceNamespace: dynamodb
    ReadCapacityScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 15
        MinCapacity: 5
        ResourceId: !Join
          - /
          - - table
            - !Ref DDBTable
        RoleARN: !GetAtt ScalingRole.Arn
        ScalableDimension: dynamodb:table:ReadCapacityUnits
        ServiceNamespace: dynamodb
    ScalingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - application-autoscaling.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: "root"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:DescribeTable"
                    - "dynamodb:UpdateTable"
                    - "cloudwatch:PutMetricAlarm"
                    - "cloudwatch:DescribeAlarms"
                    - "cloudwatch:GetMetricStatistics"
                    - "cloudwatch:SetAlarmState"
                    - "cloudwatch:DeleteAlarms"
                  Resource: "*"
    WriteScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref WriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 50.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    ReadScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref ReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 50.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
    ReqTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "srcIp"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "srcIp"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ReqTableWriteScaleTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 15
        MinCapacity: 5
        ResourceId: !Join
          - /
          - - table
            - !Ref ReqTable
        RoleARN: !GetAtt ScalingRole.Arn
        ScalableDimension: dynamodb:table:WriteCapacityUnits
        ServiceNamespace: dynamodb
    ReqTableReadScaleTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 15
        MinCapacity: 5
        ResourceId: !Join
          - /
          - - table
            - !Ref ReqTable
        RoleARN: !GetAtt ScalingRole.Arn
        ScalableDimension: dynamodb:table:ReadCapacityUnits
        ServiceNamespace: dynamodb
    ReqTableWriteScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: ReqTableWriteScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref ReqTableWriteScaleTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 50.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    ReqTableReadScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: ReqTableReadScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref ReqTableReadScaleTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 50.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization